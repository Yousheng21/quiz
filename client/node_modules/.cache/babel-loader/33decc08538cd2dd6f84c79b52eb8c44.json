{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshHistory, setHistory } from \"../reducers/appReducer\";\nexport const startHistory = async () => {\n  try {\n    let amount = {\n      history: {\n        value: 0\n      },\n      biology: {\n        value: 0\n      },\n      geography: {\n        value: 0\n      },\n      mixed: {\n        value: 0\n      }\n    };\n    const id = store.getState().user.currentUser.id;\n    const response = await axios.post('http://localhost:5000/history/response', {\n      id\n    });\n    store.dispatch(setHistory(response.data.response, {}));\n    response.data.response.forEach(item => {\n      if (item.userId === id) {\n        switch (item.kind) {\n          case 'history':\n            {\n              amount.history.value++; // amount.history.avg += item.result;\n\n              break;\n            }\n\n          case 'biology':\n            {\n              amount.biology++; // amount.biology.avg += item.result;\n\n              break;\n            }\n\n          case 'geography':\n            {\n              amount.geography++; // amount.geography.avg += item.result;\n\n              break;\n            }\n\n          case 'mixed':\n            {\n              amount.mixed++; // amount.mixed.avg += item.result;\n\n              break;\n            }\n        }\n      }\n    });\n    console.log(amount);\n    saveToLocalStorage('history', response.data.response); // saveToLocalStorage('amount',()=>{\n    //     counterQuizzes(response.data.response);\n    // });\n    // console.log(response.data.response)\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const counterQuizzes = history => {// Object.keys(amount).map((item)=>{\n  //     amount[item].avg /= amount[item].value\n  // })\n};\nexport const actionRefreshHistory = () => {\n  let history = store.getState().app.history;\n  if (history.length === 0) store.dispatch(refreshHistory());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/history.js"],"names":["React","saveToLocalStorage","store","axios","refreshHistory","setHistory","startHistory","amount","history","value","biology","geography","mixed","id","getState","user","currentUser","response","post","dispatch","data","forEach","item","userId","kind","console","log","e","counterQuizzes","actionRefreshHistory","app","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IAA4BC,KAA5B,QAAwC,UAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,UAAxB,QAAyC,wBAAzC;AAGA,OAAO,MAAOC,YAAY,GAAG,YAAW;AAChC,MAAI;AACA,QAAIC,MAAM,GAAG;AACTC,MAAAA,OAAO,EAAC;AACJC,QAAAA,KAAK,EAAC;AADF,OADC;AAITC,MAAAA,OAAO,EAAE;AACLD,QAAAA,KAAK,EAAC;AADD,OAJA;AAQTE,MAAAA,SAAS,EAAE;AACPF,QAAAA,KAAK,EAAC;AADC,OARF;AAYTG,MAAAA,KAAK,EAAC;AACFH,QAAAA,KAAK,EAAC;AADJ;AAZG,KAAb;AAkBA,UAAMI,EAAE,GAAGX,KAAK,CAACY,QAAN,GAAiBC,IAAjB,CAAsBC,WAAtB,CAAkCH,EAA7C;AACA,UAAMI,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAW,wCAAX,EAAoD;AACvEL,MAAAA;AADuE,KAApD,CAAvB;AAIAX,IAAAA,KAAK,CAACiB,QAAN,CAAed,UAAU,CAACY,QAAQ,CAACG,IAAT,CAAcH,QAAf,EAAyB,EAAzB,CAAzB;AAEAA,IAAAA,QAAQ,CAACG,IAAT,CAAcH,QAAd,CAAuBI,OAAvB,CAAgCC,IAAD,IAAQ;AACnC,UAAIA,IAAI,CAACC,MAAL,KAAcV,EAAlB,EAAqB;AACjB,gBAAQS,IAAI,CAACE,IAAb;AACI,eAAK,SAAL;AAAe;AACXjB,cAAAA,MAAM,CAACC,OAAP,CAAeC,KAAf,GADW,CAEX;;AACA;AACH;;AACD,eAAK,SAAL;AAAe;AACXF,cAAAA,MAAM,CAACG,OAAP,GADW,CAEX;;AACA;AACH;;AACD,eAAK,WAAL;AAAiB;AACbH,cAAAA,MAAM,CAACI,SAAP,GADa,CAEb;;AACA;AACH;;AACD,eAAK,OAAL;AAAa;AACTJ,cAAAA,MAAM,CAACK,KAAP,GADS,CAET;;AACA;AACH;AApBL;AAsBH;AACJ,KAzBD;AA0BAa,IAAAA,OAAO,CAACC,GAAR,CAAYnB,MAAZ;AAEAN,IAAAA,kBAAkB,CAAC,SAAD,EAAWgB,QAAQ,CAACG,IAAT,CAAcH,QAAzB,CAAlB,CAtDA,CAuDA;AACA;AACA;AACA;AAMH,GAhED,CAgEE,OAAOU,CAAP,EAAU;AACRF,IAAAA,OAAO,CAACC,GAAR,CAAYC,CAAC,CAACV,QAAd;AACH;AAGR,CAtEM;AAwEP,OAAO,MAAMW,cAAc,GAAIpB,OAAD,IAAW,CAErC;AACA;AACA;AAEH,CANM;AAQP,OAAO,MAAMqB,oBAAoB,GAAG,MAAI;AACpC,MAAIrB,OAAO,GAAGN,KAAK,CAACY,QAAN,GAAiBgB,GAAjB,CAAqBtB,OAAnC;AACA,MAAIA,OAAO,CAACuB,MAAR,KAAmB,CAAvB,EAA0B7B,KAAK,CAACiB,QAAN,CAAef,cAAc,EAA7B;AAC7B,CAHM","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshHistory, setHistory} from \"../reducers/appReducer\";\r\n\r\n\r\nexport const  startHistory = async () =>{\r\n        try {\r\n            let amount = {\r\n                history:{\r\n                    value:0,\r\n                },\r\n                biology: {\r\n                    value:0,\r\n\r\n                },\r\n                geography: {\r\n                    value:0,\r\n\r\n                },\r\n                mixed:{\r\n                    value:0,\r\n\r\n                }\r\n            };\r\n\r\n            const id = store.getState().user.currentUser.id;\r\n            const response = await axios.post('http://localhost:5000/history/response',{\r\n                id\r\n            });\r\n\r\n            store.dispatch(setHistory(response.data.response, {}));\r\n\r\n            response.data.response.forEach((item)=>{\r\n                if (item.userId===id){\r\n                    switch (item.kind) {\r\n                        case 'history':{\r\n                            amount.history.value++;\r\n                            // amount.history.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'biology':{\r\n                            amount.biology++;\r\n                            // amount.biology.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'geography':{\r\n                            amount.geography++;\r\n                            // amount.geography.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'mixed':{\r\n                            amount.mixed++;\r\n                            // amount.mixed.avg += item.result;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n            console.log(amount)\r\n\r\n            saveToLocalStorage('history',response.data.response);\r\n            // saveToLocalStorage('amount',()=>{\r\n            //     counterQuizzes(response.data.response);\r\n            // });\r\n            // console.log(response.data.response)\r\n\r\n\r\n\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e.response);\r\n        }\r\n\r\n\r\n}\r\n\r\nexport const counterQuizzes = (history)=>{\r\n\r\n    // Object.keys(amount).map((item)=>{\r\n    //     amount[item].avg /= amount[item].value\r\n    // })\r\n\r\n}\r\n\r\nexport const actionRefreshHistory = ()=>{\r\n    let history = store.getState().app.history;\r\n    if (history.length === 0) store.dispatch(refreshHistory());\r\n}"]},"metadata":{},"sourceType":"module"}