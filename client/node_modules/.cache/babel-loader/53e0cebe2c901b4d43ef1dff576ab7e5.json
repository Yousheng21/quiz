{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshRange, setRange } from \"../reducers/appReducer\";\nexport const startRange = () => {\n  function sort(arr) {\n    return arr.sort((a, b) => {\n      return b.result - a.result;\n    });\n  }\n\n  let historyArr = [],\n      biologyArr = [],\n      geographyArr = [],\n      mixedArr = []; // try {\n  //     // await delay(1000);\n  //     const response =  await axios.post('http://localhost:5000/history/range',{\n  //         kind\n  //     });\n  //     // document.getElementById('preloader').hidden = true;\n  //     return store.dispatch(setRange(response.data.response));\n  //\n  // } catch (e) {\n  //     console.log(e.response);\n  // }\n\n  let history = store.getState().app.history;\n  history.forEach(item => {\n    switch (item.kind) {\n      case 'history':\n        historyArr.push(item);\n        break;\n\n      case 'biology':\n        biologyArr.push(item);\n        break;\n\n      case 'geography':\n        geographyArr.push(item);\n        break;\n\n      case 'mixed':\n        mixedArr.push(item);\n        break;\n\n      default:\n        break;\n    }\n  });\n  let range = {\n    history: sort(historyArr),\n    biology: sort(biologyArr),\n    geography: sort(geographyArr),\n    mixed: sort(mixedArr)\n  };\n  store.dispatch(setRange(range, top(range)));\n  saveToLocalStorage('range', range);\n  saveToLocalStorage('top', top(range));\n};\n\nfunction top(range) {\n  const userId = store.getState().user.currentUser.id;\n  let top = {\n    history: 0,\n    biology: 0,\n    geography: 0,\n    mixed: 0\n  };\n  Object.keys(top).map(item => {\n    writeTop(item);\n  });\n\n  function writeTop(kind) {\n    range[kind].every((item, number) => {\n      if (item.userId === userId) {\n        top[kind] = number + 1;\n        return false;\n      }\n    });\n  }\n\n  return top;\n}\n\nexport const actionRefreshRange = () => {\n  let range = store.getState().app.range;\n  if (Object.keys(range).length === 0) store.dispatch(refreshRange());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/range.js"],"names":["React","saveToLocalStorage","store","axios","refreshRange","setRange","startRange","sort","arr","a","b","result","historyArr","biologyArr","geographyArr","mixedArr","history","getState","app","forEach","item","kind","push","range","biology","geography","mixed","dispatch","top","userId","user","currentUser","id","Object","keys","map","writeTop","every","number","actionRefreshRange","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshRange, setRange} from \"../reducers/appReducer\";\r\n\r\n\r\n\r\nexport const  startRange = () =>{\r\n    function sort(arr) {\r\n        return arr.sort((a,b)=>{\r\n            return b.result - a.result;\r\n        })\r\n    }\r\n\r\n    let historyArr = [],biologyArr=[],geographyArr=[],mixedArr = [];\r\n    // try {\r\n    //     // await delay(1000);\r\n    //     const response =  await axios.post('http://localhost:5000/history/range',{\r\n    //         kind\r\n    //     });\r\n    //     // document.getElementById('preloader').hidden = true;\r\n    //     return store.dispatch(setRange(response.data.response));\r\n    //\r\n    // } catch (e) {\r\n    //     console.log(e.response);\r\n    // }\r\n    let history = store.getState().app.history;\r\n    history.forEach((item)=>{\r\n        switch (item.kind) {\r\n            case 'history':\r\n                historyArr.push(item)\r\n                break;\r\n            case 'biology':\r\n                biologyArr.push(item)\r\n                break;\r\n            case 'geography':\r\n                geographyArr.push(item)\r\n                break;\r\n            case 'mixed':\r\n                mixedArr.push(item)\r\n                break;\r\n            default:\r\n                break;\r\n\r\n        }\r\n    });\r\n\r\n    let range = {\r\n        history: sort(historyArr),\r\n        biology: sort(biologyArr),\r\n        geography:sort(geographyArr),\r\n        mixed:sort(mixedArr)\r\n    }\r\n    store.dispatch(setRange(range,top(range)));\r\n    saveToLocalStorage('range',range);\r\n    saveToLocalStorage('top',top(range));\r\n\r\n\r\n}\r\n\r\nfunction top(range) {\r\n    const userId = store.getState().user.currentUser.id;\r\n\r\n    let top =  {\r\n        history:0,\r\n        biology: 0,\r\n        geography: 0,\r\n        mixed: 0\r\n    }\r\n\r\n    Object.keys(top).map((item)=>{\r\n        writeTop(item);\r\n    })\r\n\r\n    function writeTop(kind){\r\n        range[kind].every((item,number)=>{\r\n            if (item.userId === userId){\r\n                top[kind] = number+1\r\n                return false;\r\n            }\r\n        })\r\n    }\r\n\r\n    return top;\r\n\r\n\r\n}\r\n\r\nexport const actionRefreshRange = ()=>{\r\n    let range = store.getState().app.range;\r\n    if (Object.keys(range).length === 0) store.dispatch(refreshRange());\r\n}\r\n"]},"metadata":{},"sourceType":"module"}