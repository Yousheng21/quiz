{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { next, setAnswer, startGame } from \"../../actions/game\";\nimport { store } from \"../../store\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nwindow.onbeforeunload = function (event) {\n  return false;\n};\n\nexport default class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loaderVisible: true,\n      number: store.getState().game.currentQuestionCount,\n      options: store.getState().game.currentOptions,\n      flag: store.getState().game.endGame,\n      length: store.getState().game.questionsLength,\n      rightAnswers: store.getState().game.rightAnswersCount,\n      kind: store.getState().game.currentKind\n    };\n    this.clear = this.clear.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n    this.setLoaderVisible = this.setLoaderVisible.bind(this);\n  } // componentWillUnmount() {\n  //     return alert('Are you sure?');\n  // }\n\n\n  setLoaderVisible(loader) {\n    this.setState({\n      loaderVisible: loader\n    });\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  clear() {\n    document.getElementById('next').style.display = 'none';\n    document.getElementById('check').style.display = 'block';\n    document.querySelectorAll('input[type=checkbox]').forEach(item => {\n      item.disabled = false;\n    });\n  }\n\n  render() {\n    startGame(); // const [loaderVisible,setLoaderVisible] = useState(false)\n\n    let answers = this.shuffleArray(this.state.options.answers);\n    console.log(this.state.flag);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: this.state.kind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), !this.state.flag ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n        in: this.state.loaderVisible,\n        timeout: 500,\n        classNames: \"answers\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answers\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [this.state.number + 1, \" Question of \", this.state.length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: this.state.options.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"answerOptions\",\n            children: answers.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Answers, {\n                type: item.type,\n                content: item.content\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 48\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'row'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              id: 'check',\n              onClick: () => setAnswer(),\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              style: {\n                display: 'none'\n              },\n              id: 'next',\n              onClick: () => {\n                next(this.state.number + 1, this.state.length);\n                if (this.state.length - this.state.number !== 1) this.setLoaderVisible(!this.state.loaderVisible);\n                this.clear();\n              },\n              children: this.state.length - this.state.number === 1 ? \"Finish\" : \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 33\n          }, this)]\n        }, this.state.number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 29\n        }, this)\n      }, this.state.number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Result, {\n        number: this.state.number,\n        answers: this.state.rightAnswers,\n        length: this.state.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useState","useDispatch","useSelector","CSSTransition","next","setAnswer","startGame","store","Answers","Result","window","onbeforeunload","event","Game","Component","constructor","props","state","loaderVisible","number","getState","game","currentQuestionCount","options","currentOptions","flag","endGame","length","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","clear","bind","shuffleArray","setLoaderVisible","loader","setState","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","document","getElementById","style","display","querySelectorAll","forEach","item","disabled","render","answers","console","log","question","map","index","type","content","flexDirection"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {next, setAnswer, startGame} from \"../../actions/game\";\r\nimport {store} from \"../../store\";\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\n\r\n\r\nwindow.onbeforeunload = function (event) {\r\n  return false;\r\n}\r\n\r\n\r\n\r\n\r\nexport default class Game extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loaderVisible:true,\r\n            number : store.getState().game.currentQuestionCount,\r\n            options : store.getState().game.currentOptions,\r\n            flag : store.getState().game.endGame,\r\n            length : store.getState().game.questionsLength,\r\n            rightAnswers : store.getState().game.rightAnswersCount,\r\n            kind : store.getState().game.currentKind,\r\n        }\r\n        this.clear = this.clear.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n        this.setLoaderVisible = this.setLoaderVisible.bind(this);\r\n\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     return alert('Are you sure?');\r\n    // }\r\n    setLoaderVisible(loader){\r\n        this.setState({\r\n            loaderVisible:loader\r\n        })\r\n    }\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    clear(){\r\n        document.getElementById('next').style.display = 'none';\r\n        document.getElementById('check').style.display = 'block';\r\n        document.querySelectorAll('input[type=checkbox]').forEach((item)=>{\r\n            item.disabled = false;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        startGame();\r\n        // const [loaderVisible,setLoaderVisible] = useState(false)\r\n\r\n        let answers = this.shuffleArray(this.state.options.answers);\r\n\r\n        console.log(this.state.flag);\r\n        return (\r\n\r\n            <div>\r\n                <h2>{this.state.kind}</h2>\r\n                {\r\n                    !this.state.flag ?\r\n\r\n                        <CSSTransition\r\n                            key={this.state.number}\r\n                            in={this.state.loaderVisible}\r\n                            timeout={500}\r\n                            classNames={\"answers\"}\r\n                        >\r\n                            <div className=\"answers\" key={this.state.number}>\r\n                                <h3>{this.state.number + 1} Question of {this.state.length}</h3>\r\n                                <h2>{this.state.options.question}</h2>\r\n                                <ul className=\"answerOptions\">\r\n                                    {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                    {answers.map((item, index) => {\r\n                                        return <Answers key={index} type={item.type} content={item.content}/>\r\n                                    })}\r\n                                </ul>\r\n                                <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                    <button type={\"button\"} id={'check'} onClick={() => setAnswer()}>Check</button>\r\n                                    <button type={\"button\"} style={{display: 'none'}} id={'next'} onClick={\r\n                                        () => { next(this.state.number + 1, this.state.length);\r\n                                        if (this.state.length - this.state.number !== 1) this.setLoaderVisible(!this.state.loaderVisible);\r\n                                        this.clear();\r\n                                    }}>{this.state.length - this.state.number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                                </div>\r\n                            </div>\r\n                        </CSSTransition>\r\n                        :\r\n                        <Result number={this.state.number} answers={this.state.rightAnswers} length={this.state.length}/>\r\n\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}