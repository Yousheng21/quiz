{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshHistory, setHistory } from \"../reducers/appReducer\";\nexport const startHistory = async () => {\n  try {\n    const id = store.getState().user.currentUser.id;\n    const response = await axios.post('http://localhost:5000/history/response', {\n      id\n    });\n    return counterQuizzes(response.data.response); // console.log(response.data.response)\n  } catch (e) {\n    console.log(e.response);\n  }\n};\n\nconst counterQuizzes = history => {\n  const userId = store.getState().user.currentUser.id;\n  let amount = {\n    history: {\n      value: 0,\n      avg: 0\n    },\n    biology: {\n      value: 0,\n      avg: 0\n    },\n    geography: {\n      value: 0,\n      avg: 0\n    },\n    mixed: {\n      value: 0,\n      avg: 0\n    }\n  };\n  history.forEach(item => {\n    if (item.userId === userId) {\n      switch (item.kind) {\n        case 'history':\n          {\n            amount.history.value++;\n            amount.history.avg += item.result;\n            break;\n          }\n\n        case 'biology':\n          {\n            amount.biology++;\n            amount.biology.avg += item.result;\n            break;\n          }\n\n        case 'geography':\n          {\n            amount.geography++;\n            amount.geography.avg += item.result;\n            break;\n          }\n\n        case 'mixed':\n          {\n            amount.mixed++;\n            amount.mixed.avg += item.result;\n            break;\n          }\n      }\n    }\n  }); // Object.keys(amount).map((item)=>{\n  //     amount[item].avg /= amount[item].value\n  // })\n\n  console.log(history);\n  store.dispatch(setHistory(history, amount)); // saveToLocalStorage('history',history);\n  // saveToLocalStorage('amount',amount);\n};\n\nexport const actionRefreshHistory = () => {\n  let history = store.getState().app.history;\n  if (history.length === 0) store.dispatch(refreshHistory());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/history.js"],"names":["React","saveToLocalStorage","store","axios","refreshHistory","setHistory","startHistory","id","getState","user","currentUser","response","post","counterQuizzes","data","e","console","log","history","userId","amount","value","avg","biology","geography","mixed","forEach","item","kind","result","dispatch","actionRefreshHistory","app","length"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IAA4BC,KAA5B,QAAwC,UAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,cAAR,EAAwBC,UAAxB,QAAyC,wBAAzC;AAGA,OAAO,MAAOC,YAAY,GAAG,YAAW;AAChC,MAAI;AACA,UAAMC,EAAE,GAAGL,KAAK,CAACM,QAAN,GAAiBC,IAAjB,CAAsBC,WAAtB,CAAkCH,EAA7C;AACA,UAAMI,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAN,CAAW,wCAAX,EAAoD;AACvEL,MAAAA;AADuE,KAApD,CAAvB;AAGA,WAAOM,cAAc,CAACF,QAAQ,CAACG,IAAT,CAAcH,QAAf,CAArB,CALA,CAMA;AAIH,GAVD,CAUE,OAAOI,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACJ,QAAd;AACH;AAGR,CAhBM;;AAkBP,MAAME,cAAc,GAAIK,OAAD,IAAa;AAChC,QAAMC,MAAM,GAAGjB,KAAK,CAACM,QAAN,GAAiBC,IAAjB,CAAsBC,WAAtB,CAAkCH,EAAjD;AACA,MAAIa,MAAM,GAAG;AACTF,IAAAA,OAAO,EAAC;AACJG,MAAAA,KAAK,EAAC,CADF;AAEJC,MAAAA,GAAG,EAAC;AAFA,KADC;AAKTC,IAAAA,OAAO,EAAE;AACLF,MAAAA,KAAK,EAAC,CADD;AAELC,MAAAA,GAAG,EAAC;AAFC,KALA;AASTE,IAAAA,SAAS,EAAE;AACPH,MAAAA,KAAK,EAAC,CADC;AAEPC,MAAAA,GAAG,EAAC;AAFG,KATF;AAaTG,IAAAA,KAAK,EAAC;AACFJ,MAAAA,KAAK,EAAC,CADJ;AAEFC,MAAAA,GAAG,EAAC;AAFF;AAbG,GAAb;AAmBAJ,EAAAA,OAAO,CAACQ,OAAR,CAAiBC,IAAD,IAAQ;AACpB,QAAIA,IAAI,CAACR,MAAL,KAAcA,MAAlB,EAAyB;AACrB,cAAQQ,IAAI,CAACC,IAAb;AACI,aAAK,SAAL;AAAe;AACXR,YAAAA,MAAM,CAACF,OAAP,CAAeG,KAAf;AACAD,YAAAA,MAAM,CAACF,OAAP,CAAeI,GAAf,IAAsBK,IAAI,CAACE,MAA3B;AACA;AACH;;AACD,aAAK,SAAL;AAAe;AACXT,YAAAA,MAAM,CAACG,OAAP;AACAH,YAAAA,MAAM,CAACG,OAAP,CAAeD,GAAf,IAAsBK,IAAI,CAACE,MAA3B;AACA;AACH;;AACD,aAAK,WAAL;AAAiB;AACbT,YAAAA,MAAM,CAACI,SAAP;AACAJ,YAAAA,MAAM,CAACI,SAAP,CAAiBF,GAAjB,IAAwBK,IAAI,CAACE,MAA7B;AACA;AACH;;AACD,aAAK,OAAL;AAAa;AACTT,YAAAA,MAAM,CAACK,KAAP;AACAL,YAAAA,MAAM,CAACK,KAAP,CAAaH,GAAb,IAAoBK,IAAI,CAACE,MAAzB;AACA;AACH;AApBL;AAsBH;AACJ,GAzBD,EArBgC,CA+ChC;AACA;AACA;;AACAb,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAhB,EAAAA,KAAK,CAAC4B,QAAN,CAAezB,UAAU,CAACa,OAAD,EAASE,MAAT,CAAzB,EAnDgC,CAoDhC;AACA;AAKH,CA1DD;;AA4DA,OAAO,MAAMW,oBAAoB,GAAG,MAAI;AACpC,MAAIb,OAAO,GAAGhB,KAAK,CAACM,QAAN,GAAiBwB,GAAjB,CAAqBd,OAAnC;AACA,MAAIA,OAAO,CAACe,MAAR,KAAmB,CAAvB,EAA0B/B,KAAK,CAAC4B,QAAN,CAAe1B,cAAc,EAA7B;AAC7B,CAHM","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshHistory, setHistory} from \"../reducers/appReducer\";\r\n\r\n\r\nexport const  startHistory = async () =>{\r\n        try {\r\n            const id = store.getState().user.currentUser.id;\r\n            const response = await axios.post('http://localhost:5000/history/response',{\r\n                id\r\n            });\r\n            return counterQuizzes(response.data.response);\r\n            // console.log(response.data.response)\r\n\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e.response);\r\n        }\r\n\r\n\r\n}\r\n\r\nconst counterQuizzes = (history) => {\r\n    const userId = store.getState().user.currentUser.id;\r\n    let amount = {\r\n        history:{\r\n            value:0,\r\n            avg:0\r\n        },\r\n        biology: {\r\n            value:0,\r\n            avg:0\r\n        },\r\n        geography: {\r\n            value:0,\r\n            avg:0\r\n        },\r\n        mixed:{\r\n            value:0,\r\n            avg:0\r\n        }\r\n    };\r\n\r\n    history.forEach((item)=>{\r\n        if (item.userId===userId){\r\n            switch (item.kind) {\r\n                case 'history':{\r\n                    amount.history.value++;\r\n                    amount.history.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'biology':{\r\n                    amount.biology++;\r\n                    amount.biology.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'geography':{\r\n                    amount.geography++;\r\n                    amount.geography.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'mixed':{\r\n                    amount.mixed++;\r\n                    amount.mixed.avg += item.result;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    })\r\n    // Object.keys(amount).map((item)=>{\r\n    //     amount[item].avg /= amount[item].value\r\n    // })\r\n    console.log(history)\r\n    store.dispatch(setHistory(history,amount ));\r\n    // saveToLocalStorage('history',history);\r\n    // saveToLocalStorage('amount',amount);\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport const actionRefreshHistory = ()=>{\r\n    let history = store.getState().app.history;\r\n    if (history.length === 0) store.dispatch(refreshHistory());\r\n}"]},"metadata":{},"sourceType":"module"}