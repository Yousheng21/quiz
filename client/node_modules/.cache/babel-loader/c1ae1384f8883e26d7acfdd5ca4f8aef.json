{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { giveAnswers, next, setAnswer, startGame } from \"../../actions/game\";\nimport { store } from \"../../store\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nwindow.onbeforeunload = function (event) {\n  return false;\n};\n\nconst Game = () => {\n  _s();\n\n  let flagStart = useSelector(state => state.game.startGame);\n  const [loaderVisible, setLoaderVisible] = useState(false);\n  const [checkValid, setCheckValid] = useState({\n    value: false,\n    text: ''\n  });\n  let number = useSelector(state => state.game.currentQuestionCount);\n  let options = useSelector(state => state.game.currentOptions);\n  let flagEnd = useSelector(state => state.game.endGame);\n  let length = useSelector(state => state.game.questionsLength);\n  let rightAnswers = useSelector(state => state.game.rightAnswersCount);\n  let kind = useSelector(state => state.game.currentKind);\n  let answers = options.answers;\n  useEffect(() => {\n    console.log(\"Comp mounted\");\n    return () => {\n      flagStart = store.getState().game.startGame;\n      if (flagStart) alert(\"Are you sure to leave quiz\");\n    };\n  }, [Game, flagStart]);\n  useEffect(() => {\n    setLoaderVisible(true);\n    answers = shuffleArray(options.answers);\n  }, [loaderVisible]);\n  startGame();\n\n  function checkForm() {\n    let answers = giveAnswers();\n    answers.length === 0 ? setCheckValid({\n      value: false,\n      text: 'Answer is empty'\n    }) : setCheckValid({\n      value: true,\n      text: ''\n    });\n  }\n\n  function shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      overflow: \"hidden\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: kind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), !flagEnd ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: loaderVisible,\n      timeout: 500,\n      classNames: \"answers\" // mountOnEnter\n      // unmountOnExit\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [number + 1, \" Question of \", length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: options.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"answerOptions\",\n          children: answers.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Answers, {\n              type: item.type,\n              content: item.content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 44\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: 'check',\n            onClick: () => {\n              checkForm();\n              if (checkValid.value) setAnswer();\n            },\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this), checkValid.text, /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            style: {\n              display: 'none'\n            },\n            id: 'next',\n            onClick: () => {\n              next(number + 1, length);\n\n              if (length - number !== 1) {\n                setLoaderVisible(!loaderVisible);\n              }\n            },\n            children: length - number === 1 ? \"Finish\" : \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 29\n        }, this)]\n      }, number, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }, this)\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {\n      number: number,\n      answers: rightAnswers,\n      length: length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"UQYZ3kRWY5apRLkF/TB1r5DuB34=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","CSSTransition","giveAnswers","next","setAnswer","startGame","store","Answers","Result","window","onbeforeunload","event","Game","flagStart","state","game","loaderVisible","setLoaderVisible","checkValid","setCheckValid","value","text","number","currentQuestionCount","options","currentOptions","flagEnd","endGame","length","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","answers","console","log","getState","alert","shuffleArray","checkForm","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","overflow","question","map","item","index","type","content","display","flexDirection"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {giveAnswers, next, setAnswer, startGame} from \"../../actions/game\";\r\nimport {store} from \"../../store\";\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\n\r\n\r\n\r\nwindow.onbeforeunload = function (event) {\r\n  return false;\r\n}\r\n\r\n\r\nconst Game = () => {\r\n\r\n    let flagStart = useSelector(state=>state.game.startGame);\r\n    const [loaderVisible,setLoaderVisible] = useState(false);\r\n    const [checkValid,setCheckValid] = useState({value:false,text:''})\r\n\r\n\r\n    let number = useSelector(state=>state.game.currentQuestionCount);\r\n    let options = useSelector(state=>state.game.currentOptions);\r\n    let flagEnd = useSelector(state=>state.game.endGame);\r\n    let length = useSelector(state=>state.game.questionsLength);\r\n    let rightAnswers = useSelector(state=>state.game.rightAnswersCount);\r\n    let kind = useSelector(state=>state.game.currentKind);\r\n\r\n\r\n    let answers = options.answers;\r\n\r\n    useEffect(()=>{\r\n        console.log(\"Comp mounted\");\r\n\r\n        return () => {\r\n            flagStart = store.getState().game.startGame;\r\n            if(flagStart) alert(\"Are you sure to leave quiz\")\r\n        };\r\n    },[Game,flagStart]);\r\n\r\n    useEffect(()=>{\r\n       setLoaderVisible(true);\r\n       answers = shuffleArray(options.answers);\r\n    },[loaderVisible])\r\n\r\n    startGame();\r\n\r\n\r\n    function checkForm() {\r\n        let answers = giveAnswers();\r\n        answers.length === 0 ? setCheckValid({value: false,text:'Answer is empty' }) : setCheckValid({value: true,text: ''});\r\n    }\r\n    function shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{overflow:\"hidden\"}}>\r\n            <h2>{kind}</h2>\r\n            {!flagEnd?\r\n                    <CSSTransition\r\n                        key={number}\r\n                        in={loaderVisible}\r\n                        timeout={500}\r\n                        classNames={\"answers\"}\r\n                        // mountOnEnter\r\n                        // unmountOnExit\r\n                    >\r\n                        <div className=\"answers\" key={number}>\r\n                            <h3>{number + 1} Question of {length}</h3>\r\n                            <h2>{options.question}</h2>\r\n                            <ul className=\"answerOptions\">\r\n                                {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                {answers.map((item, index) => {\r\n                                    return <Answers key={index} type={item.type} content={item.content}/>\r\n                                })}\r\n                            </ul>\r\n                            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                <button type={\"button\"} id={'check'} onClick={()=>{\r\n                                    checkForm();\r\n                                    if (checkValid.value) setAnswer();\r\n                                }}>Check</button>\r\n\r\n                                {checkValid.text}\r\n\r\n                                <button type={\"button\"} style={{display: 'none'}} id={'next'} onClick={() => {\r\n                                    next(number+1, length);\r\n                                    if (length - number !== 1){\r\n                                        setLoaderVisible(!loaderVisible);\r\n                                    }\r\n                                }}>{length - number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                    :\r\n                    <Result number={number} answers={rightAnswers} length={length}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}