{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\";\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { next, setAnswer, startGame } from \"../../actions/game\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nwindow.onbeforeunload = function (event) {\n  return false;\n};\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clear = this.clear.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n  }\n\n  componentWillUnmount() {\n    return alert('Are you sure?');\n  }\n\n  shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  clear() {\n    document.getElementById('next').style.display = 'none';\n    document.getElementById('check').style.display = 'block';\n    document.querySelectorAll('input[type=checkbox]').forEach(item => {\n      item.disabled = false;\n    });\n  }\n\n  render() {\n    const dispatch = useDispatch(); //  dispatch(startGame());\n\n    startGame();\n    const [loaderVisible, setLoaderVisible] = useState(false);\n    let number = useSelector(state => state.game.currentQuestionCount);\n    let options = useSelector(state => state.game.currentOptions);\n    let flag = useSelector(state => state.game.endGame);\n    let length = useSelector(state => state.game.questionsLength);\n    let rightAnswers = useSelector(state => state.game.rightAnswersCount);\n    let kind = useSelector(state => state.game.currentKind);\n    let answers = this.shuffleArray(options.answers);\n    setTimeout(() => setLoaderVisible(true));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: kind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), !flag ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n        in: loaderVisible,\n        timeout: 500,\n        classNames: \"answers\" // mountOnEnter\n        // unmountOnExit\n        ,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answers\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [number + 1, \" Question of \", length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n            children: options.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"answerOptions\",\n            children: answers.map((item, index) => {\n              return /*#__PURE__*/_jsxDEV(Answers, {\n                type: item.type,\n                content: item.content\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 48\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              flexDirection: 'row'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              id: 'check',\n              onClick: () => setAnswer(),\n              children: \"Check\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              style: {\n                display: 'none'\n              },\n              id: 'next',\n              onClick: () => {\n                next(number + 1, length);\n                if (length - number !== 1) setLoaderVisible(!loaderVisible);\n                this.clear();\n              },\n              children: length - number === 1 ? \"Finish\" : \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 33\n          }, this)]\n        }, number, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this)\n      }, number, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Result, {\n        number: number,\n        answers: rightAnswers,\n        length: length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useState","useDispatch","useSelector","CSSTransition","next","setAnswer","startGame","Answers","Result","window","onbeforeunload","event","Game","Component","constructor","props","clear","bind","shuffleArray","componentWillUnmount","alert","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","document","getElementById","style","display","querySelectorAll","forEach","item","disabled","render","dispatch","loaderVisible","setLoaderVisible","number","state","game","currentQuestionCount","options","currentOptions","flag","endGame","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","answers","setTimeout","question","map","index","type","content","flexDirection"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {next, setAnswer, startGame} from \"../../actions/game\";\r\n\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\n\r\n\r\nwindow.onbeforeunload = function (event) {\r\n  return false;\r\n}\r\n\r\n\r\n\r\n\r\nclass Game extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.clear = this.clear.bind(this);\r\n        this.shuffleArray = this.shuffleArray.bind(this);\r\n\r\n    }\r\n    componentWillUnmount() {\r\n        return alert('Are you sure?');\r\n    }\r\n\r\n    shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    clear(){\r\n        document.getElementById('next').style.display = 'none';\r\n        document.getElementById('check').style.display = 'block';\r\n        document.querySelectorAll('input[type=checkbox]').forEach((item)=>{\r\n            item.disabled = false;\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const dispatch = useDispatch();\r\n        //  dispatch(startGame());\r\n        startGame();\r\n        const [loaderVisible,setLoaderVisible] = useState(false);\r\n\r\n        let number = useSelector(state=>state.game.currentQuestionCount);\r\n        let options = useSelector(state=>state.game.currentOptions);\r\n        let flag = useSelector(state=>state.game.endGame);\r\n        let length = useSelector(state=>state.game.questionsLength);\r\n        let rightAnswers = useSelector(state=>state.game.rightAnswersCount);\r\n        let kind = useSelector(state=>state.game.currentKind);\r\n\r\n\r\n        let answers = this.shuffleArray(options.answers);\r\n\r\n        setTimeout(()=>setLoaderVisible(true),);\r\n        return (\r\n\r\n            <div>\r\n                <h2>{kind}</h2>\r\n                {\r\n                    !flag ?\r\n\r\n                        <CSSTransition\r\n                            key={number}\r\n                            in={loaderVisible}\r\n                            timeout={500}\r\n                            classNames={\"answers\"}\r\n                            // mountOnEnter\r\n                            // unmountOnExit\r\n                        >\r\n                            <div className=\"answers\" key={number}>\r\n                                <h3>{number + 1} Question of {length}</h3>\r\n                                <h2>{options.question}</h2>\r\n                                <ul className=\"answerOptions\">\r\n                                    {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                    {answers.map((item, index) => {\r\n                                        return <Answers key={index} type={item.type} content={item.content}/>\r\n                                    })}\r\n                                </ul>\r\n                                <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                    <button type={\"button\"} id={'check'} onClick={() => setAnswer()}>Check</button>\r\n                                    <button type={\"button\"} style={{display: 'none'}} id={'next'} onClick={() => {\r\n                                        next(number + 1, length);\r\n                                        if (length - number !== 1) setLoaderVisible(!loaderVisible);\r\n                                        this.clear();\r\n                                    }}>{length - number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                                </div>\r\n                            </div>\r\n                        </CSSTransition>\r\n                        :\r\n                        <Result number={number} answers={rightAnswers} length={length}/>\r\n\r\n                }\r\n            </div>\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}