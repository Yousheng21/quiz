{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\utils\\\\validator\\\\validator.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const useValidation = (value, validations) => {\n  _s();\n\n  const [isEmpty, setEmpty] = useState({\n    value: true,\n    text: ''\n  });\n  const [minLengthError, setMinLengthError] = useState({\n    value: false,\n    text: ''\n  });\n  const [maxLengthError, setMaxLengthError] = useState({\n    value: false,\n    text: ''\n  });\n  const [emailError, setEmailError] = useState({\n    value: false,\n    text: ''\n  });\n  const [inputValid, setInputValid] = useState({\n    value: false,\n    text: ''\n  });\n  useEffect(() => {\n    for (const validation in validations) {\n      switch (validation) {\n        case 'minLength':\n          value.length < validations[validation].value ? setMinLengthError({\n            value: true,\n            text: validations[validation].text\n          }) : setMinLengthError({\n            value: false,\n            text: ''\n          });\n          break;\n\n        case 'isEmpty':\n          value ? setEmpty({\n            value: false,\n            text: ''\n          }) : setEmpty({\n            value: true,\n            text: validations[validation].text\n          });\n          break;\n\n        case 'maxLength':\n          value.length > validations[validation].value ? setMaxLengthError({\n            value: true,\n            text: validations[validation].text\n          }) : setMaxLengthError({\n            value: false,\n            text: ''\n          });\n          break;\n\n        case 'isEmail':\n          const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          re.test(String(value).toLowerCase()) ? setEmailError({\n            value: false,\n            text: ''\n          }) : setEmailError({\n            value: true,\n            text: validations[validation].text\n          });\n          break;\n      }\n    }\n  }, [value]);\n  useEffect(() => {\n    if (isEmpty.value || maxLengthError.value || minLengthError.value || emailError.value) {\n      setInputValid({\n        value: false,\n        text: 'Form is invalid'\n      });\n    } else {\n      setInputValid({\n        value: true,\n        text: ''\n      });\n    }\n  }, [isEmpty.value, maxLengthError.value, minLengthError.value, emailError.value]);\n  return {\n    isEmpty,\n    minLengthError,\n    emailError,\n    maxLengthError,\n    inputValid\n  };\n};\n\n_s(useValidation, \"O6cehxtiaKjvSqqrZhA7vCGqHUs=\");\n\nexport const useInput = (initialState, validations) => {\n  _s2();\n\n  const [value, setValue] = useState(initialState);\n  const [isDirty, setDirty] = useState(false);\n  const valid = useValidation(value, validations);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const onBlur = e => {\n    setDirty(true);\n  };\n\n  const printError = validators => {\n    let flag = false;\n\n    for (let i = 0; i < validators.length; i++) {\n      for (let j = 0; j <= i; j++) {\n        if (j < i) {\n          flag = !valid[validators[j]].value;\n        } else {\n          flag = valid[validators[i]].value;\n        }\n      }\n\n      if (flag) return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          color: 'red'\n        },\n        children: valid[validators[i]].text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 30\n      }, this);\n    }\n  };\n\n  return {\n    value,\n    onChange,\n    onBlur,\n    isDirty,\n    printError,\n    ...valid\n  };\n};\n\n_s2(useInput, \"NTaWvRKc20l5RmBrIhNe1ENXwJM=\", false, function () {\n  return [useValidation];\n});","map":{"version":3,"sources":["F:/Myproject/node1/client/src/utils/validator/validator.js"],"names":["useEffect","useState","useValidation","value","validations","isEmpty","setEmpty","text","minLengthError","setMinLengthError","maxLengthError","setMaxLengthError","emailError","setEmailError","inputValid","setInputValid","validation","length","re","test","String","toLowerCase","useInput","initialState","setValue","isDirty","setDirty","valid","onChange","e","target","onBlur","printError","validators","flag","i","j","color"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\n\r\nexport const useValidation = (value,validations)=>{\r\n    const [isEmpty,setEmpty] = useState({value:true,text:''})\r\n    const [minLengthError,setMinLengthError] = useState({value:false,text:''})\r\n    const [maxLengthError,setMaxLengthError] = useState({value:false,text:''})\r\n    const [emailError,setEmailError] = useState({value:false,text:''})\r\n    const [inputValid,setInputValid] = useState({value:false,text:''})\r\n\r\n\r\n    useEffect(()=>{\r\n        for (const validation in validations) {\r\n            switch (validation) {\r\n                case 'minLength':\r\n                    value.length < validations[validation].value? setMinLengthError({value: true,text: validations[validation].text}) : setMinLengthError({value: false,text: ''})\r\n                    break;\r\n                case 'isEmpty':\r\n                    value?setEmpty({value: false,text: ''}): setEmpty({value: true,text: validations[validation].text})\r\n                    break;\r\n                case'maxLength':\r\n                    value.length > validations[validation].value? setMaxLengthError({value: true,text: validations[validation].text}) : setMaxLengthError({value: false,text: ''})\r\n                    break;\r\n                case 'isEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    re.test(String(value ).toLowerCase()) ? setEmailError({value: false,text: ''}) : setEmailError({value: true,text: validations[validation].text})\r\n                    break;\r\n\r\n            }\r\n        }\r\n    },[value])\r\n\r\n    useEffect(()=>{\r\n        if(isEmpty.value || maxLengthError.value || minLengthError.value || emailError.value){\r\n            setInputValid({value: false,text: 'Form is invalid'})\r\n        } else {\r\n            setInputValid({value: true,text: ''})\r\n        }\r\n    },[isEmpty.value,maxLengthError.value,minLengthError.value,emailError.value])\r\n\r\n    return {isEmpty,minLengthError,emailError,maxLengthError,inputValid}\r\n}\r\n\r\nexport const useInput = (initialState,validations) =>{\r\n    const [value,setValue] = useState(initialState);\r\n    const [isDirty,setDirty] = useState(false)\r\n    const valid = useValidation(value,validations)\r\n\r\n\r\n    const onChange = (e) =>{\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const onBlur = (e)=>{\r\n        setDirty(true)\r\n    }\r\n\r\n    const printError = (validators)=>{\r\n        let flag = false;\r\n        for (let i = 0; i<validators.length;i++){\r\n            for (let j = 0; j<=i;j++){\r\n                if (j<i){\r\n                    flag = !valid[validators[j]].value;\r\n                }\r\n                else {\r\n                    flag = valid[validators[i]].value;\r\n                }\r\n            }\r\n            if (flag) return <span style={{color:'red'}}>{valid[validators[i]].text}</span>;\r\n        }\r\n\r\n    }\r\n\r\n    return{\r\n        value,onChange,onBlur,isDirty,printError,...valid\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}