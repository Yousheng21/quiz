{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshHistory, setHistory } from \"../reducers/appReducer\";\nexport const startHistory = async () => {\n  try {\n    let amount = {\n      history: {\n        value: 0,\n        avg: 0\n      },\n      biology: {\n        value: 0,\n        avg: 0\n      },\n      geography: {\n        value: 0,\n        avg: 0\n      },\n      mixed: {\n        value: 0,\n        avg: 0\n      }\n    };\n    const id = store.getState().user.currentUser.id;\n    const response = await axios.post('http://localhost:5000/history/response', {\n      id\n    });\n    store.dispatch(setHistory(response.data.response, {}));\n    console.log(amount);\n    response.data.response.forEach(item => {\n      if (item.userId === id) {\n        switch (item.kind) {\n          case 'history':\n            {\n              amount.history.value++;\n              console.log(amount.history.value);\n              amount.history.avg += item.result;\n              break;\n            }\n\n          case 'biology':\n            {\n              amount.biology++;\n              amount.biology.avg += item.result;\n              break;\n            }\n\n          case 'geography':\n            {\n              amount.geography++;\n              amount.geography.avg += item.result;\n              break;\n            }\n\n          case 'mixed':\n            {\n              amount.mixed++;\n              amount.mixed.avg += item.result;\n              break;\n            }\n        }\n      }\n    });\n    saveToLocalStorage('history', response.data.response); // saveToLocalStorage('amount',()=>{\n    //     counterQuizzes(response.data.response);\n    // });\n    // console.log(response.data.response)\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const counterQuizzes = history => {// Object.keys(amount).map((item)=>{\n  //     amount[item].avg /= amount[item].value\n  // })\n};\nexport const actionRefreshHistory = () => {\n  let history = store.getState().app.history;\n  if (history.length === 0) store.dispatch(refreshHistory());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/history.js"],"names":["React","saveToLocalStorage","store","axios","refreshHistory","setHistory","startHistory","amount","history","value","avg","biology","geography","mixed","id","getState","user","currentUser","response","post","dispatch","data","console","log","forEach","item","userId","kind","result","e","counterQuizzes","actionRefreshHistory","app","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshHistory, setHistory} from \"../reducers/appReducer\";\r\n\r\n\r\nexport const  startHistory = async () =>{\r\n        try {\r\n            let amount = {\r\n                history:{\r\n                    value:0,\r\n                    avg:0\r\n                },\r\n                biology: {\r\n                    value:0,\r\n                    avg:0\r\n                },\r\n                geography: {\r\n                    value:0,\r\n                    avg:0\r\n                },\r\n                mixed:{\r\n                    value:0,\r\n                    avg:0\r\n                }\r\n            };\r\n\r\n            const id = store.getState().user.currentUser.id;\r\n            const response = await axios.post('http://localhost:5000/history/response',{\r\n                id\r\n            });\r\n\r\n            store.dispatch(setHistory(response.data.response, {}));\r\n\r\n            console.log(amount);\r\n            response.data.response.forEach((item)=>{\r\n                if (item.userId===id){\r\n                    switch (item.kind) {\r\n                        case 'history':{\r\n                            amount.history.value++;\r\n                            console.log(amount.history.value);\r\n                            amount.history.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'biology':{\r\n                            amount.biology++;\r\n                            amount.biology.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'geography':{\r\n                            amount.geography++;\r\n                            amount.geography.avg += item.result;\r\n                            break;\r\n                        }\r\n                        case 'mixed':{\r\n                            amount.mixed++;\r\n                            amount.mixed.avg += item.result;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n\r\n            saveToLocalStorage('history',response.data.response);\r\n            // saveToLocalStorage('amount',()=>{\r\n            //     counterQuizzes(response.data.response);\r\n            // });\r\n            // console.log(response.data.response)\r\n\r\n\r\n\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e.response);\r\n        }\r\n\r\n\r\n}\r\n\r\nexport const counterQuizzes = (history)=>{\r\n\r\n    // Object.keys(amount).map((item)=>{\r\n    //     amount[item].avg /= amount[item].value\r\n    // })\r\n\r\n}\r\n\r\nexport const actionRefreshHistory = ()=>{\r\n    let history = store.getState().app.history;\r\n    if (history.length === 0) store.dispatch(refreshHistory());\r\n}"]},"metadata":{},"sourceType":"module"}