{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { next, setAnswer, startGame } from \"../../actions/game\";\nimport { store } from \"../../store\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nwindow.onbeforeunload = function (event) {\n  return false;\n};\n\nconst Game = () => {\n  _s();\n\n  function shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  function clear() {\n    document.getElementById('next').style.display = 'none';\n    document.getElementById('check').style.display = 'block';\n    document.querySelectorAll('input[type=checkbox]').forEach(item => {\n      item.disabled = false;\n    });\n  }\n\n  startGame();\n  const [loaderVisible, setLoaderVisible] = useState(false);\n  let number = store.getState().game.currentQuestionCount;\n  let options = store.getState().game.currentOptions;\n  let flag = store.getState().game.endGame;\n  let length = store.getState().game.questionsLength;\n  let rightAnswers = store.getState().game.rightAnswersCount;\n  let kind = store.getState().game.currentKind;\n  let answers = shuffleArray(options.answers);\n  setTimeout(() => setLoaderVisible(true));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: kind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), !flag ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: loaderVisible,\n      timeout: 500,\n      classNames: \"answers\" // mountOnEnter\n      // unmountOnExit\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [number + 1, \" Question of \", length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: options.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"answerOptions\",\n          children: answers.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Answers, {\n              type: item.type,\n              content: item.content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 44\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: 'check',\n            onClick: () => setAnswer(),\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            style: {\n              display: 'none'\n            },\n            id: 'next',\n            onClick: () => {\n              next(number + 1, length);\n              if (length - number !== 1) setLoaderVisible(!loaderVisible);\n              clear();\n            },\n            children: length - number === 1 ? \"Finish\" : \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this)]\n      }, number, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 25\n      }, this)\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {\n      number: number,\n      answers: rightAnswers,\n      length: length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"eEMnaKaeUUMjBT5d7P1JxPm0LDE=\");\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useState","useDispatch","useSelector","CSSTransition","next","setAnswer","startGame","store","Answers","Result","window","onbeforeunload","event","Game","shuffleArray","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","clear","document","getElementById","style","display","querySelectorAll","forEach","item","disabled","loaderVisible","setLoaderVisible","number","getState","game","currentQuestionCount","options","currentOptions","flag","endGame","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","answers","setTimeout","question","map","index","type","content","flexDirection"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {next, setAnswer, startGame} from \"../../actions/game\";\r\nimport {store} from \"../../store\";\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\n\r\n\r\nwindow.onbeforeunload = function (event) {\r\n  return false;\r\n}\r\n\r\n\r\nconst Game = () => {\r\n\r\n    function shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function clear(){\r\n        document.getElementById('next').style.display = 'none';\r\n        document.getElementById('check').style.display = 'block';\r\n        document.querySelectorAll('input[type=checkbox]').forEach((item)=>{\r\n            item.disabled = false;\r\n        });\r\n    }\r\n\r\n    startGame();\r\n    const [loaderVisible,setLoaderVisible] = useState(false);\r\n\r\n    let number = store.getState().game.currentQuestionCount;\r\n    let options = store.getState().game.currentOptions;\r\n    let flag = store.getState().game.endGame;\r\n    let length = store.getState().game.questionsLength;\r\n    let rightAnswers = store.getState().game.rightAnswersCount;\r\n    let kind = store.getState().game.currentKind;\r\n\r\n\r\n    let answers = shuffleArray(options.answers);\r\n\r\n    setTimeout(()=>setLoaderVisible(true),);\r\n\r\n    return (\r\n        <div>\r\n            <h2>{kind}</h2>\r\n            {\r\n                !flag ?\r\n\r\n                    <CSSTransition\r\n                        key={number}\r\n                        in={loaderVisible}\r\n                        timeout={500}\r\n                        classNames={\"answers\"}\r\n                        // mountOnEnter\r\n                        // unmountOnExit\r\n                    >\r\n                        <div className=\"answers\" key={number}>\r\n                            <h3>{number + 1} Question of {length}</h3>\r\n                            <h2>{options.question}</h2>\r\n                            <ul className=\"answerOptions\">\r\n                                {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                {answers.map((item, index) => {\r\n                                    return <Answers key={index} type={item.type} content={item.content}/>\r\n                                })}\r\n                            </ul>\r\n                            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                <button type={\"button\"} id={'check'} onClick={() => setAnswer()}>Check</button>\r\n                                <button type={\"button\"} style={{display: 'none'}} id={'next'} onClick={() => {\r\n                                    next(number + 1, length);\r\n                                    if (length - number !== 1) setLoaderVisible(!loaderVisible);\r\n                                    clear();\r\n                                }}>{length - number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                    :\r\n                    <Result number={number} answers={rightAnswers} length={length}/>\r\n\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}