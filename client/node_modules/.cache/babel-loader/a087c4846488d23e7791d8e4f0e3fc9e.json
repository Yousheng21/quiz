{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshHistory, setHistory } from \"../reducers/appReducer\";\nexport const startHistory = async () => {\n  try {\n    const id = store.getState().user.currentUser.id;\n    const response = await axios.post('http://localhost:5000/history/response', {\n      id\n    });\n    store.dispatch(setHistory(response.data.response, {\n      history: {\n        value: 0,\n        avg: 0\n      }\n    }));\n    saveToLocalStorage('history', response.data.response); // saveToLocalStorage('amount',()=>{\n    //     counterQuizzes(response.data.response);\n    // });\n    // console.log(response.data.response)\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const counterQuizzes = history => {\n  const userId = store.getState().user.currentUser.id;\n  let amount = {\n    history: {\n      value: 0,\n      avg: 0\n    },\n    biology: {\n      value: 0,\n      avg: 0\n    },\n    geography: {\n      value: 0,\n      avg: 0\n    },\n    mixed: {\n      value: 0,\n      avg: 0\n    }\n  };\n  history.forEach(item => {\n    if (item.userId === userId) {\n      switch (item.kind) {\n        case 'history':\n          {\n            amount.history.value++;\n            amount.history.avg += item.result;\n            break;\n          }\n\n        case 'biology':\n          {\n            amount.biology++;\n            amount.biology.avg += item.result;\n            break;\n          }\n\n        case 'geography':\n          {\n            amount.geography++;\n            amount.geography.avg += item.result;\n            break;\n          }\n\n        case 'mixed':\n          {\n            amount.mixed++;\n            amount.mixed.avg += item.result;\n            break;\n          }\n      }\n    }\n  }); // Object.keys(amount).map((item)=>{\n  //     amount[item].avg /= amount[item].value\n  // })\n\n  console.log(amount);\n  return amount;\n};\nexport const actionRefreshHistory = () => {\n  let history = store.getState().app.history;\n  if (history.length === 0) store.dispatch(refreshHistory());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/history.js"],"names":["React","saveToLocalStorage","store","axios","refreshHistory","setHistory","startHistory","id","getState","user","currentUser","response","post","dispatch","data","history","value","avg","e","console","log","counterQuizzes","userId","amount","biology","geography","mixed","forEach","item","kind","result","actionRefreshHistory","app","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshHistory, setHistory} from \"../reducers/appReducer\";\r\n\r\n\r\nexport const  startHistory = async () =>{\r\n        try {\r\n            const id = store.getState().user.currentUser.id;\r\n            const response = await axios.post('http://localhost:5000/history/response',{\r\n                id\r\n            });\r\n\r\n            store.dispatch(setHistory(response.data.response, {history:{value:0, avg:0}}));\r\n            saveToLocalStorage('history',response.data.response);\r\n            // saveToLocalStorage('amount',()=>{\r\n            //     counterQuizzes(response.data.response);\r\n            // });\r\n            // console.log(response.data.response)\r\n\r\n\r\n\r\n\r\n\r\n        } catch (e) {\r\n            console.log(e.response);\r\n        }\r\n\r\n\r\n}\r\n\r\nexport const counterQuizzes = (history)=>{\r\n    const userId = store.getState().user.currentUser.id;\r\n    let amount = {\r\n        history:{\r\n            value:0,\r\n            avg:0\r\n        },\r\n        biology: {\r\n            value:0,\r\n            avg:0\r\n        },\r\n        geography: {\r\n            value:0,\r\n            avg:0\r\n        },\r\n        mixed:{\r\n            value:0,\r\n            avg:0\r\n        }\r\n    };\r\n\r\n    history.forEach((item)=>{\r\n        if (item.userId===userId){\r\n            switch (item.kind) {\r\n                case 'history':{\r\n                    amount.history.value++;\r\n                    amount.history.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'biology':{\r\n                    amount.biology++;\r\n                    amount.biology.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'geography':{\r\n                    amount.geography++;\r\n                    amount.geography.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'mixed':{\r\n                    amount.mixed++;\r\n                    amount.mixed.avg += item.result;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    })\r\n    // Object.keys(amount).map((item)=>{\r\n    //     amount[item].avg /= amount[item].value\r\n    // })\r\n    console.log(amount)\r\n    return amount;\r\n\r\n}\r\n\r\nexport const actionRefreshHistory = ()=>{\r\n    let history = store.getState().app.history;\r\n    if (history.length === 0) store.dispatch(refreshHistory());\r\n}"]},"metadata":{},"sourceType":"module"}