{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { next, setAnswer, startGame } from \"../../actions/game\";\nimport { store } from \"../../store\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\"; // window.onbeforeunload = function (event) {\n//   return false;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  useEffect(() => {\n    console.log(\"Comp mounted\");\n    startGame();\n    setTimeout(() => setLoaderVisible(true));\n    return () => console.log(\"Comp unmount\");\n  }, [startGame()]);\n  const [loaderVisible, setLoaderVisible] = useState(false);\n  let number = useSelector(state => state.game.currentQuestionCount);\n  let options = useSelector(state => state.game.currentOptions);\n  let flag = useSelector(state => state.game.endGame);\n  let length = useSelector(state => state.game.questionsLength);\n  let rightAnswers = useSelector(state => state.game.rightAnswersCount);\n  let kind = useSelector(state => state.game.currentKind);\n  let answers = shuffleArray(options.answers);\n\n  function shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  function clear() {\n    document.getElementById('next').style.display = 'none';\n    document.getElementById('check').style.display = 'block';\n    document.querySelectorAll('input[type=checkbox]').forEach(item => {\n      item.disabled = false;\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: kind\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), flag === false ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: loaderVisible,\n      timeout: 500,\n      classNames: \"answers\" // mountOnEnter\n      // unmountOnExit\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [number + 1, \" Question of \", length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: options.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"answerOptions\",\n          children: answers.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Answers, {\n              type: item.type,\n              content: item.content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 44\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            id: 'check',\n            onClick: () => setAnswer(),\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            style: {\n              display: 'none'\n            },\n            id: 'next',\n            onClick: () => {\n              next(number + 1, length);\n\n              if (length - number !== 1) {\n                setLoaderVisible(!loaderVisible);\n                clear();\n              }\n            },\n            children: length - number === 1 ? \"Finish\" : \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 29\n        }, this)]\n      }, number, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }, this)\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {\n      number: number,\n      answers: rightAnswers,\n      length: length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"i9mZWMUcGGM7mQT//y9+QgKpsDg=\", false, function () {\n  return [useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","CSSTransition","next","setAnswer","startGame","store","Answers","Result","Game","console","log","setTimeout","setLoaderVisible","loaderVisible","number","state","game","currentQuestionCount","options","currentOptions","flag","endGame","length","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","answers","shuffleArray","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","clear","document","getElementById","style","display","querySelectorAll","forEach","item","disabled","question","map","index","type","content","flexDirection"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {next, setAnswer, startGame} from \"../../actions/game\";\r\nimport {store} from \"../../store\";\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\n\r\n\r\n\r\n// window.onbeforeunload = function (event) {\r\n//   return false;\r\n// }\r\n\r\n\r\nconst Game = () => {\r\n    useEffect(()=>{\r\n        console.log(\"Comp mounted\");\r\n        startGame();\r\n        setTimeout(()=>setLoaderVisible(true),);\r\n\r\n        return () => console.log(\"Comp unmount\");\r\n    },[startGame()]);\r\n\r\n    const [loaderVisible,setLoaderVisible] = useState(false);\r\n\r\n    let number = useSelector(state=>state.game.currentQuestionCount);\r\n    let options = useSelector(state=>state.game.currentOptions);\r\n    let flag = useSelector(state=>state.game.endGame);\r\n    let length = useSelector(state=>state.game.questionsLength);\r\n    let rightAnswers = useSelector(state=>state.game.rightAnswersCount);\r\n    let kind = useSelector(state=>state.game.currentKind);\r\n\r\n\r\n    let answers = shuffleArray(options.answers);\r\n\r\n\r\n\r\n    function shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function clear(){\r\n        document.getElementById('next').style.display = 'none';\r\n        document.getElementById('check').style.display = 'block';\r\n        document.querySelectorAll('input[type=checkbox]').forEach((item)=>{\r\n            item.disabled = false;\r\n        });\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>{kind}</h2>\r\n            {flag === false ?\r\n                    <CSSTransition\r\n                        key={number}\r\n                        in={loaderVisible}\r\n                        timeout={500}\r\n                        classNames={\"answers\"}\r\n                        // mountOnEnter\r\n                        // unmountOnExit\r\n                    >\r\n                        <div className=\"answers\" key={number}>\r\n                            <h3>{number + 1} Question of {length}</h3>\r\n                            <h2>{options.question}</h2>\r\n                            <ul className=\"answerOptions\">\r\n                                {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                {answers.map((item, index) => {\r\n                                    return <Answers key={index} type={item.type} content={item.content}/>\r\n                                })}\r\n                            </ul>\r\n                            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                <button type={\"button\"} id={'check'} onClick={() => setAnswer()}>Check</button>\r\n                                <button type={\"button\"} style={{display: 'none'}} id={'next'} onClick={() => {\r\n                                    next(number+1, length);\r\n                                    if (length - number !== 1){\r\n                                        setLoaderVisible(!loaderVisible);\r\n                                        clear();\r\n                                    }\r\n                                }}>{length - number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                    :\r\n                    <Result number={number} answers={rightAnswers} length={length}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}