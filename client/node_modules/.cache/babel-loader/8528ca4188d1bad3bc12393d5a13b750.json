{"ast":null,"code":"var _jsxFileName = \"F:\\\\Myproject\\\\node1\\\\client\\\\src\\\\components\\\\game\\\\Game.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { giveAnswers, next, setAnswer, startGame } from \"../../actions/game\";\nimport saveToLocalStorage, { store } from \"../../store\";\nimport Answers from \"./Answers\";\nimport Result from \"./Result\";\nimport \"../../assets/css/game.css\";\nimport Modal from \"../../utils/Modal/Modal\";\nimport { refreshGame, resetGame, setKind } from \"../../reducers/gameReducer\";\nimport { NavLink } from \"react-router-dom\"; // window.onbeforeunload = function (event) {\n//   return false;\n// }\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  let flagStart = useSelector(state => state.game.startGame);\n  const [loaderVisible, setLoaderVisible] = useState(false);\n  const [textError, setTextError] = useState('');\n  const [modal, setModal] = useState(false);\n  let number = useSelector(state => state.game.currentQuestionCount);\n  let options = useSelector(state => state.game.currentOptions);\n  let flagEnd = useSelector(state => state.game.endGame);\n  let length = useSelector(state => state.game.questionsLength);\n  let rightAnswers = useSelector(state => state.game.rightAnswersCount);\n  let kind = useSelector(state => state.game.currentKind);\n  refresh();\n  setTimeout(() => setLoaderVisible(true));\n  let answers = shuffleArray(options.answers);\n\n  function checkForm() {\n    let answers = giveAnswers();\n\n    if (answers.length === 0) {\n      setTextError('Answer is empty');\n      return false;\n    } else {\n      setTextError('');\n      return true;\n    }\n  }\n\n  function shuffleArray(array) {\n    var currentIndex = array.length,\n        temporaryValue,\n        randomIndex; // Пока остаются элементы, чтобы перемешать …\n\n    while (0 !== currentIndex) {\n      // Выберите оставшийся элемент …\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1; // И поменяйте местами с текущим элементом.\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  function refresh() {\n    Object.keys(options).length === 0 ? startGame('refresh') : startGame('reset');\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'd-flex justify-content-between',\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: kind\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), flagStart ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModal(true),\n        className: 'btn btn-primary mr-5 mt-2',\n        children: \"Exit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      active: modal,\n      setActive: setModal,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You are sure that want to leave from this quiz, everything data will be lost!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'd-flex justify-content-around',\n        children: [/*#__PURE__*/_jsxDEV(NavLink, {\n          to: '/game',\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setModal(false);\n              dispatch(resetGame());\n            },\n            children: \"OK\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setModal(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), !flagEnd ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: loaderVisible,\n      timeout: 500,\n      classNames: \"answers\" // mountOnEnter\n      // unmountOnExit\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [number + 1, \" Question of \", length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: options.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"answerOptions\",\n          children: answers.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(Answers, {\n              type: item.type,\n              content: item.content\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 44\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexDirection: 'row'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn btn-secondary mr-5 mt-2',\n            type: \"button\",\n            id: 'check',\n            onClick: () => {\n              if (checkForm()) setAnswer();\n            },\n            children: \"Check\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 33\n          }, this), textError, /*#__PURE__*/_jsxDEV(\"button\", {\n            className: 'btn btn-secondary mr-5 mt-2',\n            type: \"button\",\n            style: {\n              display: 'none'\n            },\n            id: 'next',\n            onClick: () => {\n              next(number + 1, length);\n\n              if (length - number !== 1) {\n                setLoaderVisible(!loaderVisible);\n              }\n            },\n            children: length - number === 1 ? \"Finish\" : \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }, this)]\n      }, number, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 25\n      }, this)\n    }, number, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {\n      number: number,\n      answers: rightAnswers,\n      length: length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Game, \"aJ2ileinib8aTwBI3jBd3G6GCuU=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = Game;\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["F:/Myproject/node1/client/src/components/game/Game.jsx"],"names":["React","useEffect","useState","useDispatch","useSelector","CSSTransition","giveAnswers","next","setAnswer","startGame","saveToLocalStorage","store","Answers","Result","Modal","refreshGame","resetGame","setKind","NavLink","Game","dispatch","flagStart","state","game","loaderVisible","setLoaderVisible","textError","setTextError","modal","setModal","number","currentQuestionCount","options","currentOptions","flagEnd","endGame","length","questionsLength","rightAnswers","rightAnswersCount","kind","currentKind","refresh","setTimeout","answers","shuffleArray","checkForm","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","Object","keys","question","map","item","index","type","content","display","flexDirection"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CSSTransition} from \"react-transition-group\";\r\nimport {giveAnswers, next, setAnswer, startGame} from \"../../actions/game\";\r\nimport saveToLocalStorage, {store} from \"../../store\";\r\nimport Answers from \"./Answers\";\r\nimport Result from \"./Result\";\r\nimport \"../../assets/css/game.css\";\r\nimport Modal from \"../../utils/Modal/Modal\";\r\nimport {refreshGame, resetGame, setKind} from \"../../reducers/gameReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\n// window.onbeforeunload = function (event) {\r\n//   return false;\r\n// }\r\n\r\n\r\nconst Game = () => {\r\n    const dispatch = useDispatch();\r\n    let flagStart = useSelector(state=>state.game.startGame);\r\n    const [loaderVisible,setLoaderVisible] = useState(false);\r\n    const [textError,setTextError] = useState('')\r\n    const [modal,setModal] = useState(false);\r\n\r\n\r\n    let number = useSelector(state=>state.game.currentQuestionCount);\r\n    let options = useSelector(state=>state.game.currentOptions);\r\n    let flagEnd = useSelector(state=>state.game.endGame);\r\n    let length = useSelector(state=>state.game.questionsLength);\r\n    let rightAnswers = useSelector(state=>state.game.rightAnswersCount);\r\n    let kind = useSelector(state=>state.game.currentKind);\r\n\r\n\r\n    refresh();\r\n\r\n    setTimeout(()=>setLoaderVisible(true),);\r\n    let answers = shuffleArray(options.answers);\r\n\r\n\r\n\r\n\r\n    function checkForm() {\r\n        let answers = giveAnswers();\r\n        if (answers.length === 0){\r\n            setTextError('Answer is empty');\r\n            return false;\r\n        } else {\r\n            setTextError('');\r\n            return true;\r\n        }\r\n    }\r\n    function shuffleArray(array) {\r\n        var currentIndex = array.length, temporaryValue, randomIndex;\r\n        // Пока остаются элементы, чтобы перемешать …\r\n        while (0 !== currentIndex) {\r\n            // Выберите оставшийся элемент …\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            // И поменяйте местами с текущим элементом.\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array;\r\n    }\r\n\r\n    function refresh() {\r\n         Object.keys(options).length===0 ? startGame('refresh') : startGame('reset');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={'d-flex justify-content-between'}>\r\n                <h2>{kind}</h2>\r\n                {flagStart ?<button onClick={()=>setModal(true)} className={'btn btn-primary mr-5 mt-2'}>Exit</button>:\"\"}\r\n            </div>\r\n            <Modal active={modal} setActive={setModal}>\r\n                <p>You are sure that want to leave from this quiz, everything data will be lost!</p>\r\n                <div className={'d-flex justify-content-around'}>\r\n                    <NavLink to={'/game'}>\r\n                        <button onClick={()=>{\r\n                            setModal(false);\r\n                            dispatch(resetGame());\r\n                        }}>OK</button>\r\n                    </NavLink>\r\n\r\n                    <button onClick={()=>setModal(false)}>Cancel</button>\r\n                </div>\r\n            </Modal>\r\n            {!flagEnd?\r\n                    <CSSTransition\r\n                        key={number}\r\n                        in={loaderVisible}\r\n                        timeout={500}\r\n                        classNames={\"answers\"}\r\n                        // mountOnEnter\r\n                        // unmountOnExit\r\n                    >\r\n                        <div className=\"answers\" key={number}>\r\n                            <h3>{number + 1} Question of {length}</h3>\r\n                            <h2>{options.question}</h2>\r\n                            <ul className=\"answerOptions\">\r\n                                {/*Для каждого варианта ответа вызываем функцию*/}\r\n                                {answers.map((item, index) => {\r\n                                    return <Answers key={index} type={item.type} content={item.content}/>\r\n                                })}\r\n                            </ul>\r\n                            <div style={{display: 'flex', flexDirection: 'row'}}>\r\n                                <button className={'btn btn-secondary mr-5 mt-2'} type={\"button\"} id={'check'} onClick={()=>{\r\n                                    if (checkForm()) setAnswer();\r\n                                }}>Check</button>\r\n\r\n                                {textError}\r\n\r\n                                <button className={'btn btn-secondary mr-5 mt-2'} type={\"button\"} style={{display: 'none'}} id={'next'} onClick={() => {\r\n                                    next(number+1, length);\r\n                                    if (length - number !== 1){\r\n                                        setLoaderVisible(!loaderVisible);\r\n                                    }\r\n                                }}>{length - number === 1 ? \"Finish\" : \"Next\"}</button>\r\n                            </div>\r\n                        </div>\r\n                    </CSSTransition>\r\n                    :\r\n                    <Result number={number} answers={rightAnswers} length={length}/>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}