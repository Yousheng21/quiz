{"ast":null,"code":"import React from \"react\";\nimport saveToLocalStorage, { loadFromLocalStorage, store } from \"../store\";\nimport axios from \"axios\";\nimport { refreshHistory, setHistory } from \"../reducers/appReducer\";\nexport const startHistory = async () => {\n  try {\n    const id = store.getState().user.currentUser.id;\n    const response = await axios.post('http://localhost:5000/history/response', {\n      id\n    });\n    let amount = counterQuizzes(response.data.response, id);\n    store.dispatch(setHistory(response.data.response, amount));\n    saveToLocalStorage('history', response.data.response);\n    saveToLocalStorage('amount', amount);\n    console.log(response.data.response);\n  } catch (e) {\n    console.log(e.response);\n  }\n};\nexport const counterQuizzes = (history, id) => {\n  let amount = {\n    history: {\n      value: 0,\n      avg: 0\n    },\n    biology: {\n      value: 0,\n      avg: 0\n    },\n    geography: {\n      value: 0,\n      avg: 0\n    },\n    mixed: {\n      value: 1,\n      avg: 1\n    }\n  };\n  history.forEach(item => {\n    if (item.userId === id) {\n      switch (item.kind) {\n        case 'history':\n          {\n            amount.history.value++;\n            amount.history.avg += item.result;\n            break;\n          }\n\n        case 'biology':\n          {\n            amount.biology.value++;\n            amount.biology.avg += item.result;\n            break;\n          }\n\n        case 'geography':\n          {\n            amount.geography.value++;\n            amount.geography.avg += item.result;\n            break;\n          }\n\n        case 'mixed':\n          {\n            amount.mixed.value++;\n            amount.mixed.avg += item.result;\n            break;\n          }\n      }\n    }\n  });\n  console.log(amount);\n  Object.keys(amount).map(item => {\n    Math.floor(amount[item].avg /= amount[item].value) * 100;\n  });\n  return amount;\n};\nexport const actionRefreshHistory = () => {\n  const history = store.getState().app.history;\n  const localHistory = loadFromLocalStorage('history');\n  if (history.length === 0 && localHistory.length !== 0) store.dispatch(refreshHistory());\n};","map":{"version":3,"sources":["F:/Myproject/node1/client/src/actions/history.js"],"names":["React","saveToLocalStorage","loadFromLocalStorage","store","axios","refreshHistory","setHistory","startHistory","id","getState","user","currentUser","response","post","amount","counterQuizzes","data","dispatch","console","log","e","history","value","avg","biology","geography","mixed","forEach","item","userId","kind","result","Object","keys","map","Math","floor","actionRefreshHistory","app","localHistory","length"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport saveToLocalStorage, {loadFromLocalStorage, store} from \"../store\";\r\nimport axios from \"axios\";\r\nimport {refreshHistory, setHistory} from \"../reducers/appReducer\";\r\n\r\n\r\nexport const  startHistory = async () =>{\r\n        try {\r\n\r\n\r\n            const id = store.getState().user.currentUser.id;\r\n            const response = await axios.post('http://localhost:5000/history/response',{\r\n                id\r\n            });\r\n\r\n            let amount = counterQuizzes(response.data.response,id);\r\n            store.dispatch(setHistory(response.data.response, amount));\r\n\r\n            saveToLocalStorage('history',response.data.response);\r\n            saveToLocalStorage('amount',amount);\r\n\r\n            console.log(response.data.response)\r\n\r\n        } catch (e) {\r\n            console.log(e.response);\r\n        }\r\n\r\n\r\n}\r\n\r\nexport const counterQuizzes = (history,id)=>{\r\n    let amount = {\r\n        history:{\r\n            value:0,\r\n            avg:0\r\n        },\r\n        biology: {\r\n            value:0,\r\n            avg:0\r\n\r\n        },\r\n        geography: {\r\n            value:0,\r\n            avg:0\r\n\r\n        },\r\n        mixed:{\r\n            value:1,\r\n            avg:1\r\n\r\n        }\r\n    };\r\n\r\n    history.forEach((item)=>{\r\n        if (item.userId===id){\r\n            switch (item.kind) {\r\n                case 'history':{\r\n                    amount.history.value++;\r\n                    amount.history.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'biology':{\r\n                    amount.biology.value++;\r\n                    amount.biology.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'geography':{\r\n                    amount.geography.value++;\r\n                    amount.geography.avg += item.result;\r\n                    break;\r\n                }\r\n                case 'mixed':{\r\n                    amount.mixed.value++;\r\n                    amount.mixed.avg += item.result;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    })\r\n    console.log(amount);\r\n    Object.keys(amount).map((item)=>{\r\n        Math.floor(amount[item].avg /= amount[item].value)*100;\r\n    })\r\n    return amount;\r\n\r\n}\r\n\r\nexport const actionRefreshHistory = ()=>{\r\n    const history = store.getState().app.history;\r\n    const localHistory = loadFromLocalStorage('history');\r\n    if (history.length === 0 && localHistory.length!==0) store.dispatch(refreshHistory());\r\n}"]},"metadata":{},"sourceType":"module"}