{"ast":null,"code":"import { loadFromLocalStorage } from \"../store\";\n\nconst questions = require('../assets/questions.json');\n\nconst SET_KIND = \"SET_KIND\";\nconst REFRESH_GAME = \"REFRESH_GAME\";\nconst NEXT_GAME = \"NEXT_GAME\";\nconst END_GAME = \"END_GAME\";\nconst RESET_GAME = \"RESET_GAME\";\nconst defaultState = {\n  currentKind: \"\",\n  currentQuestionCount: 0,\n  currentOptions: {},\n  questionsLength: 0,\n  endGame: false,\n  startGame: false,\n  rightAnswer: [],\n  rightAnswersCount: 0\n};\nexport default function gameReducer(state = defaultState, action) {\n  switch (action.type) {\n    case SET_KIND:\n      const question = questions[action.payload][0];\n      return { ...state,\n        currentKind: action.payload,\n        currentOptions: question,\n        questionsLength: questions[action.payload].length,\n        endGame: false,\n        startGame: true,\n        rightAnswer: question.answer,\n        rightAnswersCount: 0 // questionContent: question.question,\n        // currentAnswersOption: question.answers,\n        // answer: question.answer\n\n      };\n\n    case REFRESH_GAME:\n      let game = loadFromLocalStorage('game');\n      return { ...state,\n        currentKind: game.currentKind,\n        currentOptions: game.currentOptions,\n        currentQuestionCount: game.currentQuestionCount,\n        questionsLength: game.questionsLength,\n        endGame: game.endGame,\n        rightAnswer: game.rightAnswer,\n        rightAnswersCount: game.rightAnswersCount\n      };\n\n    case NEXT_GAME:\n      {\n        const question = questions[state.currentKind][state.currentQuestionCount + 1];\n        return { ...state,\n          currentQuestionCount: state.currentQuestionCount + 1,\n          // questionContent: question.question,\n          // currentAnswersOption: question.answers,\n          currentOptions: question,\n          rightAnswer: question.answer,\n          rightAnswersCount: action.payload ? state.rightAnswersCount + 1 : state.rightAnswersCount\n        };\n      }\n\n    case END_GAME:\n      return { ...state,\n        currentQuestionCount: 0,\n        endGame: true,\n        startGame: false,\n        rightAnswersCount: action.payload ? state.rightAnswersCount + 1 : state.rightAnswersCount\n      };\n\n    case RESET_GAME:\n      console.log(defaultState);\n      return defaultState;\n\n    default:\n      return state;\n  }\n}\nexport const setKind = name => ({\n  type: SET_KIND,\n  payload: name\n});\nexport const refreshGame = () => ({\n  type: REFRESH_GAME\n});\nexport const nextGame = answerFlag => ({\n  type: NEXT_GAME,\n  payload: answerFlag\n});\nexport const endGame = answerFlag => ({\n  type: END_GAME,\n  payload: answerFlag\n});\nexport const resetGame = () => ({\n  type: RESET_GAME\n});","map":{"version":3,"sources":["F:/Myproject/node1/client/src/reducers/gameReducer.js"],"names":["loadFromLocalStorage","questions","require","SET_KIND","REFRESH_GAME","NEXT_GAME","END_GAME","RESET_GAME","defaultState","currentKind","currentQuestionCount","currentOptions","questionsLength","endGame","startGame","rightAnswer","rightAnswersCount","gameReducer","state","action","type","question","payload","length","answer","game","console","log","setKind","name","refreshGame","nextGame","answerFlag","resetGame"],"mappings":"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","sourcesContent":["import {loadFromLocalStorage} from \"../store\";\r\n\r\nconst questions = require('../assets/questions.json');\r\n\r\nconst SET_KIND=\"SET_KIND\";\r\nconst REFRESH_GAME=\"REFRESH_GAME\";\r\nconst NEXT_GAME=\"NEXT_GAME\";\r\nconst END_GAME=\"END_GAME\";\r\nconst RESET_GAME=\"RESET_GAME\";\r\n\r\n\r\nconst defaultState = {\r\n    currentKind:\"\",\r\n    currentQuestionCount:0,\r\n    currentOptions:{},\r\n    questionsLength: 0,\r\n    endGame:false,\r\n    startGame:false,\r\n    rightAnswer:[],\r\n    rightAnswersCount:0\r\n}\r\n\r\nexport default function gameReducer(state=defaultState,action) {\r\n    switch (action.type) {\r\n        case SET_KIND:\r\n            const question = questions[action.payload][0];\r\n            return {\r\n                ...state,\r\n                currentKind: action.payload,\r\n                currentOptions: question,\r\n                questionsLength: questions[action.payload].length,\r\n                endGame: false,\r\n                startGame: true,\r\n                rightAnswer: question.answer,\r\n                rightAnswersCount:0\r\n                // questionContent: question.question,\r\n                // currentAnswersOption: question.answers,\r\n                // answer: question.answer\r\n            }\r\n        case REFRESH_GAME:\r\n            let game = loadFromLocalStorage('game');\r\n            return {\r\n                ...state,\r\n                currentKind:game.currentKind,\r\n                currentOptions: game.currentOptions,\r\n                currentQuestionCount: game.currentQuestionCount,\r\n                questionsLength: game.questionsLength,\r\n                endGame: game.endGame,\r\n                rightAnswer: game.rightAnswer,\r\n                rightAnswersCount: game.rightAnswersCount\r\n            }\r\n        case NEXT_GAME:{\r\n            const question = questions[state.currentKind][state.currentQuestionCount+1];\r\n            return {\r\n                ...state,\r\n                currentQuestionCount: state.currentQuestionCount+1,\r\n                // questionContent: question.question,\r\n                // currentAnswersOption: question.answers,\r\n                currentOptions: question,\r\n                rightAnswer: question.answer,\r\n                rightAnswersCount: action.payload ? state.rightAnswersCount+1 : state.rightAnswersCount\r\n\r\n            }\r\n\r\n        }\r\n        case END_GAME:\r\n            return {\r\n                ...state,\r\n                currentQuestionCount: 0,\r\n                endGame: true,\r\n                startGame: false,\r\n                rightAnswersCount: action.payload ? state.rightAnswersCount+1 : state.rightAnswersCount\r\n            }\r\n        case RESET_GAME:\r\n            console.log(defaultState);\r\n            return defaultState;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setKind = (name) =>({type:SET_KIND,payload:name})\r\nexport const refreshGame = () =>({type:REFRESH_GAME})\r\nexport const nextGame = (answerFlag) => ({type:NEXT_GAME,payload:answerFlag})\r\nexport const endGame = (answerFlag) => ({type:END_GAME,payload:answerFlag})\r\nexport const resetGame = () => ({type:RESET_GAME})"]},"metadata":{},"sourceType":"module"}